{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.CheckboxItem = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _Checkbox = _interopRequireDefault(require(\"./Checkbox\"));\n\nvar _CheckboxAndroid = _interopRequireDefault(require(\"./CheckboxAndroid\"));\n\nvar _CheckboxIOS = _interopRequireDefault(require(\"./CheckboxIOS\"));\n\nvar _Text = _interopRequireDefault(require(\"../Typography/Text\"));\n\nvar _TouchableRipple = _interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var checkboxProps = (0, _extends2.default)({}, props, {\n    status: status,\n    theme: theme\n  });\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);\n  } else {\n    checkbox = React.createElement(_Checkbox.default, checkboxProps);\n  }\n\n  return React.createElement(_TouchableRipple.default, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked'\n    },\n    onPress: onPress,\n    testID: testID\n  }, React.createElement(_reactNative.View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(_Text.default, {\n    style: [styles.label, {\n      color: theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nvar _default = (0, _theming.withTheme)(CheckboxItem);\n\nexports.default = _default;\nvar CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);\nexports.CheckboxItem = CheckboxItemWithTheme;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","position","props","checkboxProps","status","theme","isLeading","mode","checkbox","checked","testID","styles","color","textAlign","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flexShrink","flexGrow"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAyEA,IAAMA,YAAY,GAAG,SAAfA,YAAe,OAWR;AAAA,MAXS,KAWT,QAXS,KAWT;AAAA,MAXS,MAWT,QAXS,MAWT;AAAA,MAXS,KAWT,QAXS,KAWT;AAAA,MAXS,OAWT,QAXS,OAWT;AAAA,MAXS,UAWT,QAXS,UAWT;AAAA,MAXS,KAWT,QAXS,KAWT;AAAA,MAXS,MAWT,QAXS,MAWT;AAAA,MAXS,IAWT,QAXS,IAWT;AAAA,2BAFXC,QAEW;AAAA,MAFXA,QAEW,8BAXS,UAWT;AAAA,MADRC,KACQ;AACX,MAAMC,aAAa,8BAAG,KAAH;AAAeC,IAAAA,MAAZ,EAAYA,MAAf;AAAuBC,IAAAA,KAAAA,EAAAA;AAAvB,IAAnB;AACA,MAAMC,SAAS,GAAGL,QAAQ,KAA1B,SAAA;AACA,MAAA,QAAA;;AAEA,MAAIM,IAAI,KAAR,SAAA,EAAwB;AACtBC,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAXA,aAAW,CAAXA;AADF,GAAA,MAEO,IAAID,IAAI,KAAR,KAAA,EAAoB;AACzBC,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAXA,aAAW,CAAXA;AADK,GAAA,MAEA;AACLA,IAAAA,QAAQ,GAAG,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAXA,aAAW,CAAXA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA;AACE,IAAA,kBAAkB,EADpB,KAAA;AAEE,IAAA,iBAAiB,EAFnB,UAAA;AAGE,IAAA,kBAAkB,EAAE;AAClBC,MAAAA,OAAO,EAAEL,MAAM,KAAK;AADF,KAHtB;AAME,IAAA,OAAO,EANT,OAAA;AAOE,IAAA,MAAM,EAAEM;AAPV,GAAA,EASE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA;AACE,IAAA,KAAK,EAAE,CAACC,MAAM,CAAP,SAAA,EADT,KACS,CADT;AAEE,IAAA,aAAa,EAFf,MAAA;AAGE,IAAA,yBAAyB,EAAC;AAH5B,GAAA,EAKGL,SAAS,IALZ,QAAA,EAME,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLK,MAAM,CADD,KAAA,EAEL;AACEC,MAAAA,KAAK,EAAEP,KAAK,CAALA,MAAAA,CADT,IAAA;AAEEQ,MAAAA,SAAS,EAAEP,SAAS,GAAA,OAAA,GAAa;AAFnC,KAFK,EAAA,UAAA;AADT,GAAA,EANF,KAME,CANF,EAkBG,CAAA,SAAA,IA5BP,QAUI,CATF,CADF;AAxBF,CAAA;;AA0DAN,YAAY,CAAZA,WAAAA,GAAAA,eAAAA;;eAEec,wBAAf,YAAeA,C;;;AAGf,IAAMC,qBAAqB,GAAGD,wBAA9B,YAA8BA,CAA9B;;;AAIA,IAAMH,MAAM,GAAG,wBAAA,MAAA,CAAkB;AAC/BK,EAAAA,SAAS,EAAE;AACTC,IAAAA,aAAa,EADJ,KAAA;AAETC,IAAAA,UAAU,EAFD,QAAA;AAGTC,IAAAA,cAAc,EAHL,eAAA;AAITC,IAAAA,eAAe,EAJN,CAAA;AAKTC,IAAAA,iBAAiB,EAAE;AALV,GADoB;AAQ/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,EAAA;AAELC,IAAAA,UAAU,EAFL,CAAA;AAGLC,IAAAA,QAAQ,EAAE;AAHL;AARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n      }}\n      onPress={onPress}\n      testID={testID}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}