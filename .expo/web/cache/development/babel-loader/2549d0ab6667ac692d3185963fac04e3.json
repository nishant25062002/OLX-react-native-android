{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _colors = require(\"../../styles/colors\");\n\nvar _CardContent = _interopRequireDefault(require(\"./CardContent\"));\n\nvar _CardActions = _interopRequireDefault(require(\"./CardActions\"));\n\nvar _CardCover = _interopRequireDefault(require(\"./CardCover\"));\n\nvar _CardTitle = _interopRequireDefault(require(\"./CardTitle\"));\n\nvar _Surface = _interopRequireDefault(require(\"../Surface\"));\n\nvar _theming = require(\"../../core/theming\");\n\nvar _excluded = [\"elevation\", \"onLongPress\", \"onPress\", \"mode\", \"children\", \"style\", \"theme\", \"testID\", \"accessible\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Card = function Card(_ref) {\n  var _ref$elevation = _ref.elevation,\n      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,\n      onLongPress = _ref.onLongPress,\n      onPress = _ref.onPress,\n      _ref$mode = _ref.mode,\n      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,\n      children = _ref.children,\n      style = _ref.style,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      accessible = _ref.accessible,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),\n      elevation = _React$useRef.current;\n\n  var animation = theme.animation,\n      dark = theme.dark,\n      mode = theme.mode,\n      roundness = theme.roundness;\n\n  var handlePressIn = function handlePressIn() {\n    var dark = theme.dark,\n        mode = theme.mode,\n        scale = theme.animation.scale;\n\n    _reactNative.Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var handlePressOut = function handlePressOut() {\n    _reactNative.Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact'\n    }).start();\n  };\n\n  var total = React.Children.count(children);\n  var siblings = React.Children.map(children, function (child) {\n    return React.isValidElement(child) && child.type ? child.type.displayName : null;\n  });\n  var borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();\n  return React.createElement(_Surface.default, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: elevation,\n      borderColor: borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, React.createElement(_reactNative.View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, function (child, index) {\n    return React.isValidElement(child) ? React.cloneElement(child, {\n      index: index,\n      total: total,\n      siblings: siblings\n    }) : child;\n  }))));\n};\n\nCard.Content = _CardContent.default;\nCard.Actions = _CardActions.default;\nCard.Cover = _CardCover.default;\nCard.Title = _CardTitle.default;\n\nvar styles = _reactNative.StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\n\nvar _default = (0, _theming.withTheme)(Card);\n\nexports.default = _default;","map":{"version":3,"sources":["Card.tsx"],"names":["Card","elevation","cardElevation","mode","cardMode","rest","current","React","Animated","roundness","handlePressIn","animation","scale","toValue","duration","useNativeDriver","handlePressOut","total","siblings","child","borderColor","color","theme","borderRadius","styles","onPress","accessible","innerContainer","index","flexGrow","flexShrink","outlined","borderWidth","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"script"}