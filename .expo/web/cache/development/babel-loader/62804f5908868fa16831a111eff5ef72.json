{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _TextInputAdornment = _interopRequireWildcard(require(\"./Adornment/TextInputAdornment\"));\n\nvar _InputLabel = _interopRequireDefault(require(\"./Label/InputLabel\"));\n\nvar _LabelBackground = _interopRequireDefault(require(\"./Label/LabelBackground\"));\n\nvar _constants = require(\"./constants\");\n\nvar _helpers = require(\"./helpers\");\n\nvar _enums = require(\"./Adornment/enums\");\n\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  (0, _inherits2.default)(TextInputOutlined, _React$Component);\n\n  var _super = _createSuper(TextInputOutlined);\n\n  function TextInputOutlined() {\n    (0, _classCallCheck2.default)(this, TextInputOutlined);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          customOutlineColor = _this$props.outlineColor,\n          activeOutlineColor = _this$props.activeOutlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);\n      var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = _reactNative.StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          lineHeight = _ref.lineHeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          textAlign = _ref.textAlign,\n          viewStyle = (0, _objectWithoutProperties2.default)(_ref, _excluded2);\n\n      var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;\n        inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n        placeholderColor = colors.placeholder;\n        outlineColor = customOutlineColor || colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n            type = _ref2.type;\n        return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;\n      });\n\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);\n      }\n\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);\n      var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        label: label,\n        scale: fontScale,\n        isAndroid: _reactNative.Platform.OS === 'android',\n        styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = (0, _helpers.calculatePadding)(paddingSettings);\n      var paddingOut = (0, _helpers.adjustPaddingOut)((0, _extends2.default)({}, paddingSettings, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset,\n        roundness: theme.roundness\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({\n        height: minHeight,\n        affixHeight: _constants.ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = (0, _extends2.default)({}, adornmentProps, {\n          left: left,\n          right: right,\n          textStyle: (0, _extends2.default)({}, font, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return React.createElement(_reactNative.View, {\n        style: viewStyle\n      }, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        focused: parentState.focused,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(_reactNative.View, null, React.createElement(_reactNative.View, {\n        style: [styles.labelContainer, {\n          paddingTop: LABEL_PADDING_TOP,\n          minHeight: minHeight\n        }]\n      }, React.createElement(_InputLabel.default, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: _LabelBackground.default\n      }), render === null || render === void 0 ? void 0 : render((0, _extends2.default)({\n        testID: 'text-input-outlined'\n      }, rest, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, (0, _extends2.default)({}, font, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'\n        }), _reactNative.Platform.OS === 'web' && {\n          outline: 'none'\n        }, adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(_TextInputAdornment.default, adornmentProps)));\n    }\n  }]);\n  return TextInputOutlined;\n}(React.Component);\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(_reactNative.TextInput, props);\n  }\n});\n\nvar _default = TextInputOutlined;\nexports.default = _default;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(_reactNative.View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","disabled","error","multiline","editable","render","props","outlineColor","rest","adornmentConfig","getAdornmentConfig","left","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","isTransparent","color","inputTextColor","activeColor","placeholderColor","activeOutlineColor","customOutlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","lineHeight","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","roundness","theme","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","focused","textStyle","visible","labeled","paddingTop","LabelBackground","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Outline","borderRadius","borderWidth","borderColor","position","paddingHorizontal","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          focused={parentState.focused}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View>\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              testID: 'text-input-outlined',\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}