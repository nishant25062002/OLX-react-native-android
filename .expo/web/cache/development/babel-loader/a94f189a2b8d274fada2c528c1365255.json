{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _AnimatedText = _interopRequireDefault(require(\"../../Typography/AnimatedText\"));\n\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n      labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n      label = _props$labelProps.label,\n      error = _props$labelProps.error,\n      onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n      hasActiveOutline = _props$labelProps.hasActiveOutline,\n      activeColor = _props$labelProps.activeColor,\n      placeholderStyle = _props$labelProps.placeholderStyle,\n      baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n      baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n      font = _props$labelProps.font,\n      fontSize = _props$labelProps.fontSize,\n      fontWeight = _props$labelProps.fontWeight,\n      placeholderOpacity = _props$labelProps.placeholderOpacity,\n      wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n      labelScale = _props$labelProps.labelScale,\n      topPosition = _props$labelProps.topPosition,\n      paddingOffset = _props$labelProps.paddingOffset,\n      placeholderColor = _props$labelProps.placeholderColor,\n      errorColor = _props$labelProps.errorColor,\n      labelTranslationXOffset = _props$labelProps.labelTranslationXOffset;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  var labelStyle = (0, _extends2.default)({}, font, {\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n  return label ? _react.default.createElement(_reactNative.Animated.View, {\n    pointerEvents: \"none\",\n    style: [_reactNative.StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    labelProps: props.labelProps\n  }), _react.default.createElement(_AnimatedText.default, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1\n  }, label), _react.default.createElement(_AnimatedText.default, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1\n  }, label)) : null;\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\n\nvar _default = InputLabel;\nexports.default = _default;","map":{"version":3,"sources":["InputLabel.tsx"],"names":["InputLabel","props","labelBackground","labelTranslationXOffset","labelTranslationX","transform","translateX","inputRange","outputRange","labelStyle","fontSize","fontWeight","parentState","translateY","scale","label","StyleSheet","styles","opacity","labelProps","top","topPosition","paddingOffset","color","hasActiveOutline","error","placeholderOpacity","labelContainer","zIndex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"script"}